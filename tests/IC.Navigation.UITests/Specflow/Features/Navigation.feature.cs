// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IC.Navigation.UITests.Specflow.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.Collection("UITests")]
    [Xunit.TraitAttribute("Category", "xunit:collection(UITests)")]
    public partial class NavigationFeature : Xunit.IClassFixture<NavigationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Navigation.feature"
#line hidden
        
        public NavigationFeature(NavigationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Navigation", "\tAs a tester\r\n\tI want to the system to be able to navigate through the UI applica" +
                    "tion ", ProgrammingLanguage.CSharp, new string[] {
                        "xunit:collection(UITests)"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
    testRunner.Given("The application under test has been started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Reuse steps declares in different Step classes")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "Reuse steps declares in different Step classes")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void ReuseStepsDeclaresInDifferentStepClasses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reuse steps declares in different Step classes", null, new string[] {
                        "mytag"});
#line 10
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 13
    testRunner.And("The \"menu view\" has been opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
    testRunner.Then("The control \"button to open the red view\" should be displayed in the current view" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
    testRunner.Given("The \"blue view\" has been opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
    testRunner.When("I navigate to \"menu view\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
    testRunner.Then("The \"menu view\" should be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
    testRunner.And("The control \"button to open the red view\" should be displayed in the current view" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
    testRunner.And("The control \"fake name\" should not be displayed in the current view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Navigate from the \"menu view\" to \"blue view\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "Navigate from the \"menu view\" to \"blue view\"")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void NavigateFromTheMenuViewToBlueView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Navigate from the \"menu view\" to \"blue view\"", null, new string[] {
                        "mytag"});
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 23
 testRunner.Given("The \"menu view\" has been opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.When("The \"button to open the blue view\" is pressed in current view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("The \"blue view\" should be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Navigate back to the \"menu view\" from \"blue view\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "Navigate back to the \"menu view\" from \"blue view\"")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void NavigateBackToTheMenuViewFromBlueView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Navigate back to the \"menu view\" from \"blue view\"", null, new string[] {
                        "mytag"});
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 29
 testRunner.Given("The \"blue view\" has been opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.When("The \"button to go back to the previous view\" is pressed in current view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then("The \"menu view\" should be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Navigate to the \"yellow view\" from \"blue view\"")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "Navigate to the \"yellow view\" from \"blue view\"")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void NavigateToTheYellowViewFromBlueView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Navigate to the \"yellow view\" from \"blue view\"", null, new string[] {
                        "mytag"});
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 35
 testRunner.Given("The \"blue view\" has been opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.When("The \"button to open the yellow view\" is pressed in current view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("The \"yellow view\" should be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="The back button in \"yellow view\" should open the previous view")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "The back button in \"yellow view\" should open the previous view")]
        [Xunit.TraitAttribute("Category", "mytag")]
        [Xunit.InlineDataAttribute("\"menu view\"", "\"button to open the yellow view\"", new string[0])]
        [Xunit.InlineDataAttribute("\"blue view\"", "\"button to open the yellow view\"", new string[0])]
        [Xunit.InlineDataAttribute("\"red view\"", "\"button to open the yellow view\"", new string[0])]
        public virtual void TheBackButtonInYellowViewShouldOpenThePreviousView(string view_Before_Yellow, string button_To_Open_Yellow_View, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The back button in \"yellow view\" should open the previous view", null, @__tags);
#line 40
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 41
    testRunner.Given(string.Format("The {0} has been opened", view_Before_Yellow), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
    testRunner.When(string.Format("The {0} is pressed in current view", button_To_Open_Yellow_View), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("The \"yellow view\" should be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
    testRunner.When("The \"button to go back to the previous view\" is pressed in current view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
    testRunner.Then(string.Format("The {0} should be opened", view_Before_Yellow), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Navigate from a view to another and come back to the original view.")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "Navigate from a view to another and come back to the original view.")]
        [Xunit.TraitAttribute("Category", "mytag")]
        [Xunit.InlineDataAttribute("\"menu view\"", "\"yellow view\"", new string[0])]
        [Xunit.InlineDataAttribute("\"blue view\"", "\"red view\"", new string[0])]
        [Xunit.InlineDataAttribute("\"red view\"", "\"yellow view\"", new string[0])]
        [Xunit.InlineDataAttribute("\"yellow view\"", "\"menu view\"", new string[0])]
        public virtual void NavigateFromAViewToAnotherAndComeBackToTheOriginalView_(string original_View, string destination_View, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Navigate from a view to another and come back to the original view.", null, @__tags);
#line 54
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 55
    testRunner.Given(string.Format("The {0} has been opened", original_View), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
    testRunner.When(string.Format("I navigate to {0}", destination_View), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
    testRunner.Then(string.Format("The {0} should be opened", destination_View), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
    testRunner.When(string.Format("I navigate to {0}", original_View), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
    testRunner.Then(string.Format("The {0} should be opened", original_View), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Resolve navigation when an action can open more than one view.")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "Resolve navigation when an action can open more than one view.")]
        [Xunit.TraitAttribute("Category", "mytag")]
        [Xunit.InlineDataAttribute("\"blue view\"", "\"red view\"", new string[0])]
        [Xunit.InlineDataAttribute("\"red view\"", "\"blue view\"", new string[0])]
        [Xunit.InlineDataAttribute("\"menu view\"", "\"blue view\"", new string[0])]
        [Xunit.InlineDataAttribute("\"menu view\"", "\"red view\"", new string[0])]
        [Xunit.InlineDataAttribute("\"red view\"", "\"menu view\"", new string[0])]
        [Xunit.InlineDataAttribute("\"blue view\"", "\"menu view\"", new string[0])]
        public virtual void ResolveNavigationWhenAnActionCanOpenMoreThanOneView_(string view_Opening_Yellow_View, string a_Different_Than_View_Opening_Yellow_View, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve navigation when an action can open more than one view.", null, @__tags);
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 71
    testRunner.When(string.Format("I navigate to {0}", view_Opening_Yellow_View), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
    testRunner.And("I navigate to \"yellow view\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
    testRunner.And(string.Format("I navigate to {0}", a_Different_Than_View_Opening_Yellow_View), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
    testRunner.Then(string.Format("The {0} should be opened", a_Different_Than_View_Opening_Yellow_View), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NavigationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NavigationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
